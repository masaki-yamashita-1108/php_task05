
課題
■Laravelの特徴
アプリ開発に際して、土台として使用するもの。
フレームワークを導入すると、アプリ開発において、オリジナルの機能を、スムーズに実装していくことが出来る。
Laravelはプロジェクトを作成して開発を進めていくが、model、view、controllerという3つの機能で構成されている。
実際には、ルーティングという機能も使われている。

・Routing
設定されたコントローラーに渡す。
・Controller/Model
Controller/Model間で、データベースと連携してデータを保存したり、取得したりする。
・Controller/View
Controller/View間で、Viewに結果を渡し、表示するデータを生成する。
・View
PCに表示するデータを渡す。

■Laravelに関して
セキュリティ性、メンテナンス性、拡張性を維持するシステムを提供できる。
PHPフレームワークの中でも、世界的に人気No1の地位を築いている。
PHPのフレームワークである、Symfonyをベースに開発された。

システム全体を、Model(データ処理)、View(画面表示)、Controller(全体の制御)の各機能に分けて整理し、これらのパーツごとに作成しながら開発を行う。
多機能(フルスタック)フレームワークであり、Webアプリケーションの様々な機能を自動生成することができる。
→実装部分における開発工数を減らすことができる。
→経験の浅いエンジニアにも対応しやすい。

Laravelはバージョンアップが頻繁に行われている。
よって、機能の追加も頻繁に行われている。
現在もシェアが広がり続けているため、プラグイン等の開発も盛ん。

■便利な機能が豊富にある
ComposerというPHPのパッケージ管理ツールを利用して、開発した機能をすぐに提供することができる。
Artisanというコマンドツールを使用すれば、各種設定や更新をはじめ、簡単なアプリ作成なども少ないコードとコマンドで手間をかけずに作成できる。

プログラムがある程度自動生成された後は、自由にコードを記述しプログラムを拡張することができる。
ソースコードを配置する際のディレクトリ構成を自由に決められるため、応用や変更に柔軟に対応できる。

バリデーション(入力値チェック)を簡単な設定だけで自動で行ってくれる機能があるため、
バリデーションの実装をする時間を短縮できる。

Laravelでは独自のORMである、Eloquent ORMを利用してデータ操作を行う。
Eloquent ORMを使うと、データベースとModel(データ処理)を結び付けて、様々なデータ操作を簡単かつ柔軟に行うことができる。






